{"version":3,"sources":["components/searchComponent/searchComponent.js","hooks/lazyLoad.hook.js","components/girdComponent/gridComponent.js","App.js","reportWebVitals.js","index.js"],"names":["Search","_ref","searchValue","isVisible","handleSearch","toggleSearch","React","createElement","className","FontAwesomeIcon","icon","faClose","faSearch","onClick","type","placeholder","onChange","style","opacity","value","LazyImage","src","alt","isLoaded","setIsLoaded","useState","imageRef","useRef","useEffect","img","current","observer","IntersectionObserver","_ref2","entry","isIntersecting","unobserve","threshold","observe","ref","width","height","GridComponent","index","movie","key","name","movieReducer","state","action","console","log","loading","data","pageTitle","error","initialState","App","moviesList","dispatch","useReducer","setSearchValue","setIsVisible","actionGetAll","async","response","fetch","ok","Error","status","json","page","content","title","message","length","filteredMovies","filter","toLowerCase","includes","e","target","faArrowLeft","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ccb54585.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch ,faClose} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./search.css\";\r\n\r\nfunction Search({ searchValue,isVisible,handleSearch, toggleSearch}) {\r\n  \r\n  return (\r\n    <div className=\"search-container\">\r\n      <FontAwesomeIcon\r\n        icon={isVisible ? faClose: faSearch}\r\n        className=\"search-icon\"\r\n        onClick={() => toggleSearch()}\r\n      />\r\n      <div className={`search-box ${isVisible ? \"visible\" : \"\"}`}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search...\"\r\n          onChange={handleSearch}\r\n          style={{ opacity: isVisible ? 1 : 0 }}\r\n          value={searchValue}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;","import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nconst LazyImage = ({ src, alt }) => {\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const imageRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const img = imageRef.current;\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        if (entry.isIntersecting) {\r\n          setIsLoaded(true);\r\n          observer.unobserve(img);\r\n        }\r\n      },\r\n      { threshold: 0.1 }\r\n    );\r\n\r\n    if (img) {\r\n      observer.observe(img);\r\n    }\r\n\r\n    return () => {\r\n      if (img) {\r\n        observer.unobserve(img);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <img\r\n      ref={imageRef}\r\n      src={isLoaded ? src : \"\"}\r\n      alt={alt}\r\n      style={{ width: \"100%\", height: \"auto\" }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default LazyImage;","import React from \"react\";\r\nimport LazyImage from \"../../hooks/lazyLoad.hook\"; \r\nconst GridComponent = ({index,movie}) => {\r\n     return (\r\n        <div className=\"movie-item\" key={index}>\r\n        <LazyImage\r\n        src={`https://test.create.diagnal.com/images/${movie[\"poster-image\"]}`}\r\n        alt={`${movie.name} Thumbnail`}\r\n        />\r\n        <div className=\"movie-title\">{movie.name}</div>\r\n      </div>\r\n     )\r\n}\r\n\r\nexport default GridComponent;","import React, { useState, useEffect, useReducer } from \"react\";\nimport \"./App.css\";\nimport Search from \"./components/searchComponent/searchComponent\";\nimport GridComponent from \"./components/girdComponent/gridComponent\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction movieReducer(state, action) {\n  console.log(action);\n  switch (action.type) {\n    case \"loading\": {\n      return {\n        ...state,\n        loading: false,\n      };\n    }\n    case \"getAllMovie\": {\n      return {\n        ...state,\n        data: action.data,\n        pageTitle: action.pageTitle,\n        loading: false,\n      };\n    }\n\n    case \"getError\": {\n      return {\n        ...state,\n        error: state.error,\n        loading: false,\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  data: [],\n  pageTitle: \"\",\n  error: null,\n};\n\nfunction App() {\n  const [moviesList, dispatch] = useReducer(movieReducer, initialState);\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [isVisible, setIsVisible] = useState(false);\n\n  const toggleSearch = () => {\n    setIsVisible(!isVisible);\n  };\n\n  const actionGetAll = async () => {\n    const url = \"https://test.create.diagnal.com/data/page1.json\";\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json = await response.json();\n      dispatch({\n        type: \"getAllMovie\",\n        data: json.page[\"content-items\"].content,\n        pageTitle: json.page.title,\n        loading: false,\n      });\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  const handleSearch = (e) => {\n    const { value } = e.target;\n    if (value.length == 0) {\n      actionGetAll();\n      setSearchValue(\"\");\n    } else {\n      setSearchValue(value);\n    }\n  };\n  useEffect(() => {\n    actionGetAll();\n  }, []);\n\n  useEffect(() => {\n    if (!isVisible) {\n      setSearchValue(\"\");\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (searchValue.length > 0 && moviesList.data.length > 0) {\n      const filteredMovies = moviesList.data.filter((movie) =>\n        movie.name.toLowerCase().includes(searchValue.toLowerCase())\n      );\n\n      dispatch({\n        type: \"getAllMovie\",\n        data: filteredMovies,\n        loading: false,\n      });\n    }\n  }, [searchValue]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Search\n          searchValue={searchValue}\n          isVisible={isVisible}\n          toggleSearch={toggleSearch}\n          handleSearch={handleSearch}\n        />\n      </header>\n      <main>\n        <section>\n          <div className=\"\">\n            <h2>\n              {\" \"}\n              <FontAwesomeIcon className=\"back-icon\" icon={faArrowLeft} />\n              {moviesList.pageTitle}\n            </h2>\n          </div>\n          <div className=\"movie-grid\">\n            {moviesList.data.length > 0 ? (\n              moviesList.data.map((movie, index) => (\n                <GridComponent key={index} index={index} movie={movie} />\n              ))\n            ) : (\n              <div className=\"response-negative-message\">\n                No Movies are found\n              </div>\n            )}\n          </div>\n       \n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}